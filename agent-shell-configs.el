;;; agent-shell-configs.el --- Provider-specific agent configs -*- lexical-binding: t; -*-

;; Copyright (C) 2024 Alvaro Ramirez

;; Author: Alvaro Ramirez https://xenodium.com
;; URL: https://github.com/xenodium/agent-shell

;; This package is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 3, or (at your option)
;; any later version.

;; This package is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:
;;
;; This file includes all the provider-specific configs.
;;

;;; Code:

(eval-when-compile
  (require 'cl-lib))
(require 'shell-maker)
(require 'acp)

(declare-function agent-shell--start "agent-shell")
(declare-function agent-shell--indent-string "agent-shell")
(declare-function agent-shell--interpolate-gradient "agent-shell")

;;;; Anthropic ;;;;

(cl-defun agent-shell-make-anthropic-authentication (&key api-key login)
  "Create anthropic authentication configuration.

API-KEY is the Anthropic API key string.
LOGIN when non-nil indicates to use login-based authentication.

Only one of API-KEY or LOGIN should be provided, never both."
  (when (and api-key login)
    (error "Cannot specify both :api-key and :login - choose one"))
  (unless (or api-key login)
    (error "Must specify either :api-key or :login"))
  (cond
   (api-key `((:api-key . ,api-key)))
   (login `((:login . t)))))

(defcustom agent-shell-anthropic-authentication
  (agent-shell-make-anthropic-authentication :login t)
  "Configuration for Anthropic authentication.
For Subcription/login (default):

  (setq agent-shell-anthropic-authentication
        (agent-shell-make-anthropic-authentication :login t))

For api key:

  (setq agent-shell-anthropic-authentication
        (agent-shell-make-anthropic-authentication :api-key \"your-key\"))

  or

  (setq agent-shell-anthropic-authentication
        (agent-shell-make-anthropic-authentication :api-key (lambda () ... )))"
  :type 'alist
  :group 'acp)

(defun agent-shell-start-claude-code-agent ()
  "Start an interactive Claude Code agent shell."
  (interactive)
  (agent-shell--start
   :new-session t
   :mode-line-name "Claude Code"
   :buffer-name "Claude Code"
   :shell-prompt "Claude Code> "
   :shell-prompt-regexp "Claude Code> "
   :icon-name "anthropic.png"
   :welcome-function #'agent-shell--claude-code-welcome-message
   :client-maker (lambda ()
                   (agent-shell-make-claude-client))))

(defun agent-shell-make-claude-client ()
  "Create a Claude Code ACP client using configured authentication.

Uses `agent-shell-anthropic-authentication' for authentication configuration."
  (when (and (boundp 'agent-shell-anthropic-key) agent-shell-anthropic-key)
    (user-error "Please migrate to use agent-shell-anthropic-authentication and eval (makunbound 'agent-shell-anthropic-key)."))
  (cond
   ((map-elt agent-shell-anthropic-authentication :api-key)
    (acp-make-client :command "claude-code-acp"
                     :environment-variables (list (format "ANTHROPIC_API_KEY=%s"
                                                          (agent-shell-anthropic-key)))))
   ((map-elt agent-shell-anthropic-authentication :login)
    (acp-make-client :command "claude-code-acp"
                     :environment-variables (list "ANTHROPIC_API_KEY=")))
   (t
    (error "Invalid authentication configuration"))))

(defun agent-shell-anthropic-key ()
  "Get the Anthropic API key."
  (cond ((stringp (map-elt agent-shell-anthropic-authentication :api-key))
         (map-elt agent-shell-anthropic-authentication :api-key))
        ((functionp (map-elt agent-shell-anthropic-authentication :api-key))
         (condition-case _err
             (funcall (map-elt agent-shell-anthropic-authentication :api-key))
           (error
            "api-key not found")))
        (t
         nil)))

(defun agent-shell--claude-code-welcome-message (config)
  "Return Claude Code ASCII art as per own repo using `shell-maker' CONFIG."
  (let ((art (agent-shell--indent-string 4 (agent-shell--claude-code-ascii-art)))
        (message (string-trim-left (shell-maker-welcome-message config) "\n")))
    (concat "\n\n"
            art
            "\n\n"
            message)))

(defun agent-shell--claude-code-ascii-art ()
  "Claude Code ASCII art.

Generated by https://github.com/shinshin86/oh-my-logo."
  (let* ((is-dark (eq (frame-parameter nil 'background-mode) 'dark))
         (text (string-trim "
  ██████╗ ██╗       █████╗  ██╗   ██╗ ██████╗  ███████╗
 ██╔════╝ ██║      ██╔══██╗ ██║   ██║ ██╔══██╗ ██╔════╝
 ██║      ██║      ███████║ ██║   ██║ ██║  ██║ █████╗
 ██║      ██║      ██╔══██║ ██║   ██║ ██║  ██║ ██╔══╝
 ╚██████╗ ███████╗ ██║  ██║ ╚██████╔╝ ██████╔╝ ███████╗
  ╚═════╝ ╚══════╝ ╚═╝  ╚═╝  ╚═════╝  ╚═════╝  ╚══════╝
  ██████╗  ██████╗  ██████╗  ███████╗
 ██╔════╝ ██╔═══██╗ ██╔══██╗ ██╔════╝
 ██║      ██║   ██║ ██║  ██║ █████╗
 ██║      ██║   ██║ ██║  ██║ ██╔══╝
 ╚██████╗ ╚██████╔╝ ██████╔╝ ███████╗
  ╚═════╝  ╚═════╝  ╚═════╝  ╚══════╝
" "\n")))
    (propertize text 'font-lock-face (if is-dark
                                         '(:foreground "#d26043")
                                       '(:foreground "#b8431f")))))

;;;; Google ;;;;

(defcustom agent-shell-google-key nil
  "Google API key as a string or a function that loads and returns it."
  :type '(choice (function :tag "Function")
                 (string :tag "String"))
  :group 'agent-shell)

(defun agent-shell-start-gemini-agent ()
  "Start an interactive Gemini CLI agent shell."
  (interactive)
  (let ((api-key (agent-shell-google-key)))
    (unless api-key
      (user-error "Please set your `agent-shell-google-key'"))
    (agent-shell--start
     :new-session t
     :mode-line-name "Gemini"
     :buffer-name "Gemini"
     :shell-prompt "Gemini> "
     :shell-prompt-regexp "Gemini> "
     :icon-name "gemini.png"
     :welcome-function #'agent-shell--gemini-welcome-message
     :needs-authentication t
     :authenticate-request-maker (lambda ()
                                   (acp-make-authenticate-request :method-id "gemini-api-key"))
     :client-maker (lambda ()
                     (acp-make-gemini-client :api-key api-key)))))

(defun agent-shell--gemini-welcome-message (config)
  "Return Gemini CLI ASCII art as per own repo using `shell-maker' CONFIG."
  (let ((art (agent-shell--indent-string 4 (agent-shell--gemini-ascii-art)))
        (message (string-trim-left (shell-maker-welcome-message config) "\n")))
    (concat "\n\n\n"
            art
            "\n\n"
            message)))

(defun agent-shell--gemini-ascii-art ()
  "Generate Gemini CLI ASCII art, inspired by its codebase.

https://github.com/google-gemini/gemini-cli/tree/main/packages/cli/src/ui/components/Header.tsx
https://github.com/google-gemini/gemini-cli/tree/main/packages/cli/src/ui/components/AsciiArt.ts
https://github.com/google-gemini/gemini-cli/tree/main/packages/cli/src/ui/themes/theme.ts"
  (let* ((text (string-trim "
 ███            █████████  ██████████ ██████   ██████ █████ ██████   █████ █████
░░░███         ███░░░░░███░░███░░░░░█░░██████ ██████ ░░███ ░░██████ ░░███ ░░███
  ░░░███      ███     ░░░  ░███  █ ░  ░███░█████░███  ░███  ░███░███ ░███  ░███
    ░░░███   ░███          ░██████    ░███░░███ ░███  ░███  ░███░░███░███  ░███
     ███░    ░███    █████ ░███░░█    ░███ ░░░  ░███  ░███  ░███ ░░██████  ░███
   ███░      ░░███  ░░███  ░███ ░   █ ░███      ░███  ░███  ░███  ░░█████  ░███
 ███░         ░░█████████  ██████████ █████     █████ █████ █████  ░░█████ █████
░░░            ░░░░░░░░░  ░░░░░░░░░░ ░░░░░     ░░░░░ ░░░░░ ░░░░░    ░░░░░ ░░░░░" "\n"))
         (is-dark (eq (frame-parameter nil 'background-mode) 'dark))
         (gradient-colors (if is-dark
                              '("#4796E4" "#847ACE" "#C3677F")
                            '("#3B82F6" "#8B5CF6" "#DD4C4C")))
         (lines (split-string text "\n"))
         (result ""))
    (dolist (line lines)
      (let ((line-length (length line))
            (propertized-line ""))
        (dotimes (i line-length)
          (let* ((char (substring line i (1+ i)))
                 (progress (/ (float i) line-length))
                 (color (agent-shell--interpolate-gradient gradient-colors progress)))
            (setq propertized-line
                  (concat propertized-line
                          (propertize char 'font-lock-face `(:foreground ,color))))))
        (setq result (concat result propertized-line "\n"))))
    (string-trim-right result)))

(defun agent-shell--gemini-text ()
  "Colorized Gemini text with Google-branded colors."
  (let* ((is-dark (eq (frame-parameter nil 'background-mode) 'dark))
         (colors (if is-dark
                     '("#4796E4" "#6B82D9" "#847ACE" "#9E6FA8" "#B16C93" "#C3677F")
                   '("#3B82F6" "#5F6CF6" "#8B5CF6" "#A757D0" "#C354A0" "#DD4C4C")))
         (text "Gemini")
         (result ""))
    (dotimes (i (length text))
      (setq result (concat result
                           (propertize (substring text i (1+ i))
                                       'font-lock-face `(:foreground ,(nth (mod i (length colors)) colors))))))
    result))

;;;; OpenAI ;;;;

(defcustom agent-shell-openai-key nil
  "OpenAI API key as a string or a function that loads and returns it."
  :type '(choice (function :tag "Function")
                 (string :tag "String"))
  :group 'agent-shell)

(defun agent-shell-start-codex-agent ()
  "Start an interactive Claude Code agent shell."
  (interactive)
  (let ((api-key (agent-shell-openai-key)))
    (unless api-key
      (user-error "Please set your `agent-shell-openai-key'"))
    (agent-shell--start
     :new-session t
     :mode-line-name "Codex"
     :buffer-name "Codex"
     :shell-prompt "Codex> "
     :shell-prompt-regexp "Codex> "
     :welcome-function #'agent-shell--codex-welcome-message
     :icon-name "openai.png"
     :client-maker (lambda ()
                     (acp-make-codex-client :api-key api-key)))))

(defun agent-shell-openai-key ()
  "Get the OpenAI API key."
  (cond ((stringp agent-shell-openai-key)
         agent-shell-openai-key)
        ((functionp agent-shell-openai-key)
         (condition-case _err
             (funcall agent-shell-openai-key)
           (error
            "KEY-NOT-FOUND")))
        (t
         nil)))

(defun agent-shell--codex-welcome-message (config)
  "Return Codex welcome message using `shell-maker' CONFIG."
  (let ((art (agent-shell--indent-string 4 (agent-shell--codex-ascii-art)))
        (message (string-trim-left (shell-maker-welcome-message config) "\n")))
    (concat "\n\n"
            art
            "\n\n"
            message)))

(defun agent-shell--codex-ascii-art ()
  "Codex ASCII art.

From https://github.com/openai/codex/blob/main/codex-rs/tui/frames/slug/frame_1.txt."
  (let* ((text (string-trim "
          d-dcottoottd
      dot5pot5tooeeod dgtd
    tepetppgde   egpegxoxeet
   cpdoppttd            5pecet
  odc5pdeoeoo            g-eoot
 xp te  ep5ceet           p-oeet
tdg-p    poep5ged          g e5e
eedee     t55ecep            gee
eoxpe    ceedoeg-xttttttdtt og e
 dxcp  dcte 5p egeddd-cttte5t5te
 oddgd dot-5e   edpppp dpg5tcd5
  pdt gt e              tp5pde
    doteotd          dodtedtg
      dptodgptccocc-optdtep
        epgpexxdddtdctpg
" "\n")))
    (propertize text 'font-lock-face 'font-lock-doc-face)))

(defun agent-shell-google-key ()
  "Get the Google API key."
  (cond ((stringp agent-shell-google-key)
         agent-shell-google-key)
        ((functionp agent-shell-google-key)
         (condition-case _err
             (funcall agent-shell-google-key)
           (error
            "KEY-NOT-FOUND")))
        (t
         nil)))

(provide 'agent-shell-configs)

;;; agent-shell-configs.el ends here
