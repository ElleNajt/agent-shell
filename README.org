#+TITLE: Emacs Agent Shell
#+AUTHOR: Álvaro Ramírez

[[file:agent-shell.png]]

* This project needs your funding

As you pay for those useful LLM tokens, consider [[https://github.com/sponsors/xenodium][sponsoring]] development and maintenance of this project.

=agent-shell= is in its infancy. It's got rough edges and lots of features to implement still. With your help, I can make this effort more [[https://github.com/sponsors/xenodium][sustainable]].

Thank you!

[[https://xenodium.com/][Alvaro]]

* agent-shell

A native Emacs shell to interact with LLM agents powered by ACP ([[https://agentclientprotocol.com][Agent Client Protocol]]).

With agent-shell, you can chat with the likes of Gemini CLI, Claude Code, or any other ACP-driven agent.

*Note:* This package is in the very early stages and is likely incomplete or may have some rough edges.

* Setup

** External dependencies

*** ACP adapter for Claude Code

For Anthropic's Claude Code, install [[https://github.com/zed-industries/claude-code-acp][Zed's claude-code-acp]].

*** Gemini CLI

For Google's [[https://github.com/google-gemini/gemini-cli][Gemini CLI]], be sure to get a recent release supporting the =--experimental-acp= flag.

*** Codex

For OpenAI's Codex, install [[https://github.com/cola-io/codex-acp][codex-acp]] and ensure the `codex-acp` executable is in PATH.

*** Goose

For Goose CLI, install [[https://block.github.io/goose/docs/getting-started/installation][goose]] and ensure the `goose` executable is in PATH.

** Installation

=agent-shell= is powered by built-in =comint-shell=, via [[https://github.com/xenodium/shell-maker][shell-maker]], available on [[https://melpa.org/#/shell-maker][MELPA]].

You can install =shell-maker= via:

#+begin_src emacs-lisp
  (use-package shell-maker
    :ensure t)
#+end_src

=agent-shell= also depends on [[https://github.com/xenodium/acp.el][acp.el]], which isn't yet on MELPA. You can install with:

#+begin_src emacs-lisp
  (use-package acp
    :vc (:url "https://github.com/xenodium/acp.el"))
#+end_src

If you run into an error like =use-package: Keyword :vc received unknown argument=, ensure you're using the built-in =:vc= syntax shown above. Earlier guides relied on the external [[https://github.com/slotThe/vc-use-package][vc-use-package]] extension, which accepted =:fetcher=/:repo= keywords, but Emacs 30+ expects ELPA-style specs such as =:url=.

Finally, install =agent-shell= with:

#+begin_src emacs-lisp
  (use-package agent-shell
    :vc (:url "https://github.com/xenodium/agent-shell"))
#+end_src

*** Doom Emacs

If you are using Doom Emacs and would like to use the =package!= macro:

#+begin_src emacs-lisp
(package! shell-maker)
(package! acp :recipe (:host github :repo "xenodium/acp.el"))
(package! agent-shell :recipe (:host github :repo "xenodium/agent-shell"))
#+end_src

Run =doom sync= and restart.

Include =require= before configuration:

#+begin_src emacs-lisp
(require 'acp)
(require 'agent-shell)
;; rest of config...
#+end_src

** Configuration

Configure authentication for the agent providers you want to use.

*** Anthropic Claude

For login-based authentication (default):

#+begin_src emacs-lisp
(setq agent-shell-anthropic-authentication
      (agent-shell-anthropic-make-authentication :login t))
#+end_src

For API key authentication:

#+begin_src emacs-lisp
;; With string
(setq agent-shell-anthropic-authentication
      (agent-shell-anthropic-make-authentication :api-key "your-anthropic-api-key-here"))

;; With function
(setq agent-shell-anthropic-authentication
      (agent-shell-anthropic-make-authentication
       :api-key (lambda () (auth-source-pass-get "secret" "anthropic-api-key"))))
#+end_src

*** Google Gemini

For login-based authentication (default):

#+begin_src emacs-lisp
(setq agent-shell-google-authentication
      (agent-shell-google-make-authentication :login t))
#+end_src

For API key authentication:

#+begin_src emacs-lisp
;; With string
(setq agent-shell-google-authentication
      (agent-shell-google-make-authentication :api-key "your-google-api-key-here"))

;; With function
(setq agent-shell-google-authentication
      (agent-shell-google-make-authentication
       :api-key (lambda () (auth-source-pass-get "secret" "google-api-key"))))
#+end_src

For Vertex AI authentication:

#+begin_src emacs-lisp
(setq agent-shell-google-authentication
      (agent-shell-google-make-authentication :vertex-ai t))
#+end_src

*** OpenAI Codex

For API key authentication:

#+begin_src emacs-lisp
;; With string
(setq agent-shell-openai-authentication
      (agent-shell-openai-make-authentication :api-key "your-openai-api-key-here"))

;; With function
(setq agent-shell-openai-authentication
      (agent-shell-openai-make-authentication
       :api-key (lambda () (auth-source-pass-get "secret" "openai-api-key"))))
#+end_src

*** Goose

For OpenAI API key authentication:

#+begin_src emacs-lisp
;; With string
(setq agent-shell-goose-authentication
      (agent-shell-make-goose-authentication :openai-api-key "your-openai-api-key-here"))

;; With function
(setq agent-shell-goose-authentication
      (agent-shell-make-goose-authentication
       :openai-api-key (lambda () (auth-source-pass-get "secret" "openai-api-key"))))
#+end_src

** Usage

Start an agent shell session:

- =M-x agent-shell-anthropic-start-claude-code= - Start a Claude Code agent session
- =M-x agent-shell-openai-start-codex= - Start a Codex agent session
- =M-x agent-shell-google-start-gemini= - Start a Gemini agent session
- =M-x agent-shell-goose-start-agent= - Start a Goose agent session

** Running agents in Devcontainers / Docker containers

=agent-shell= provides rudimentary support for running agents in containers.

Adapt the command that starts the agent so it is executed inside the container; for example:

#+begin_src emacs-lisp
(setq agent-shell-anthropic-claude-command '("devcontainer" "exec" "--workspace-folder" "." "claude-code-acp"))
#+end_src

Note that any =:environment-variables= you may have passed to =acp-make-client= will not apply to the agent process running inside the container.
It's expected to inject environment variables by means of your devcontainer configuration / Dockerfile.

Next, set an =agent-shell-path-resolver-function= that resolves container paths in the local working directory, and vice versa.
Agent shell provides the =agent-shell--resolve-devcontainer-path= function for use with devcontainers:

#+begin_src emacs-lisp
(setq agent-shell-path-resolver-function #'agent-shell--resolve-devcontainer-path)
#+end_src

Note that this allows the agent to access files on your local file-system.
While care has been taken to restrict access to files in the local working directory, it's probably possible for a malicious agent to circumvent this restriction.

All of the above settings can be applied on a per-project basis using [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Directory-Variables.html][directory-local variables]].

** Keybindings

- =C-c C-c= - Interrupt current agent operation
- =TAB and Shift-TAB= - Navigate interactive elements
